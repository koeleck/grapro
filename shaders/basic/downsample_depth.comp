#version 440 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D uDepthTex;
layout(binding = 1, r32f) uniform restrict readonly image2D  uDepthIn;
layout(binding = 2, r32f) uniform restrict writeonly image2D  uDepthOut;

void main()
{

    const int x = int(gl_GlobalInvocationID.x);
    const int y = int(gl_GlobalInvocationID.y);

    const ivec2 size = imageSize(uDepthOut).xy;

    if (x < size.x && y < size.y) {
        if (all(equal(size, textureSize(uDepthTex, 0)))) {
            imageStore(uDepthOut, ivec2(x, y), texelFetch(uDepthTex, ivec2(x, y), 0).rrrr);
        } else {
            const ivec2 prev_size = imageSize(uDepthIn).xy;
            ivec2 origin = 2 * ivec2(x, y);
            vec4 samples = vec4(0.0);
            samples[0] = imageLoad(uDepthIn, origin).r;
            if ((prev_size.x & 0x01) == 0)
                samples[1] = imageLoad(uDepthIn, origin + ivec2(1, 0)).r;
            if ((prev_size.y & 0x01) == 0)
                samples[2] = imageLoad(uDepthIn, origin + ivec2(0, 1)).r;
            if (((prev_size.x & 0x01) == 0) && ((prev_size.y & 0x01) == 0))
                samples[3] = imageLoad(uDepthIn, origin + ivec2(1)).r;

            imageStore(uDepthOut, ivec2(x, y), vec4(max(max(samples[0], samples[1]), max(samples[2], samples[3]))));
        }
        //if (size == textureSize(uDepthOrig, 0)) {
        //    imageStore(uDepthOut, ivec2(x, y), texelFetch(uDepthOrig, ivec2(x, y), 0).rrrr);
        //} else {
        //    ivec2 origin = 2 * ivec2(x, y);
        //    bvec2 test = lessThan(origin + ivec2(1), prev_size);

        //    const float d0 = imageLoad(uDepthIn, origin).r;
        //    const float d1 = test.x ? imageLoad(uDepthIn, origin + ivec2(1, 0)).r : d0;
        //    const float d2 = test.y ? imageLoad(uDepthIn, origin + ivec2(0, 1)).r : d0;
        //    const float d3 = all(test) ? imageLoad(uDepthIn, origin + ivec2(1)).r : d0;

        //    imageStore(uDepthOut, ivec2(x, y), vec4(max(max(d0, d1), max(d2, d3))));
        //}
    }
}
