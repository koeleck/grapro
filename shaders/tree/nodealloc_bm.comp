#version 440 core

#include "common/extensions.glsl"
#include "common/bindings.glsl"
#include "common/voxel.glsl"

layout (local_size_variable) in;

layout (binding = 0) uniform atomic_uint u_allocCount;

uniform uint u_numNodesThisLevel; 	// nodesPerLevel[i]
uniform uint u_nodeOffset;			// offset to first node of next level
uniform uint u_allocOffset;			// offset to first free space for new nodes

void main()
{
	// retrieve current thread id and return if out of bounds
	const uint threadID = gl_GlobalInvocationID.x;
	if (threadID >= u_numNodesThisLevel)
		return;

	const uint idx = u_nodeOffset + threadID;
	const uint childidx = octree[idx].id;
	if((childidx & 0x80000000) != 0) {
		// node is flagged
		// alloc
		uint off = atomicCounterIncrement(u_allocCount);
		off *= 8; // 8 nodes
		off += u_allocOffset;
		off |= 0x80000000;
		octree[idx].id = off;

		// init
        for (uint i = 0; i < 8; ++i) {
            octree[off + i].id = 0u;
        }
	}
}
