#version 440 core

#include "common/bindings.glsl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// voxel buffer
struct voxelStruct {
    uvec4 position;
    vec4 color;
    vec4 normal;
};

layout (std430, binding = VOXEL_BINDING) buffer voxelBlock {
    voxelStruct voxel[];
};

// octree buffer
struct octreeBuffer {
    uint id;
};

layout (std430, binding = OCTREE_BINDING) buffer octreeBlock {
    octreeBuffer octree[];
};

uniform uint u_numVoxelFrag;
uniform uint u_treeLevels;
uniform uint u_maxLevel;

void main()
{
    // retrieve current thread id and return if out of bounds
    uint threadId = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
    if (threadId >= u_numVoxelFrag)
        return;

    // local vars
    uint childidx = 0;

    uint nodeptr = octree[childidx].id; // root address
    uint subnodeptr = 0;

    uint voxel_dim = uint(pow(2, u_treeLevels));
    bool has_to_be_flagged = true;

    uvec3 umin = uvec3(0);

    uvec4 pos  = voxel[threadId].position;

    // iterate through all tree levels
    for (uint i = 0; i < u_maxLevel; ++i) {

        // go to next dimension
        voxel_dim /= 2;

        // check if the current node is flagged
        // IS IT EVER NOT FLAGGED????
        if ((nodeptr & 0x80000000) == 0) {
            // node is not flagged
            has_to_be_flagged = false;
            break;
        }

        // get child pointer by ignoring the node's ptr MSB
        childidx = uint(nodeptr & 0x7FFFFFFF);

        // create subnodes
        uint subnodeptrX = clamp(int(1 + pos.x - umin.x - voxel_dim), 0, 1);
        uint subnodeptrY = clamp(int(1 + pos.y - umin.y - voxel_dim), 0, 1);
        uint subnodeptrZ = clamp(int(1 + pos.z - umin.z - voxel_dim), 0, 1);

        subnodeptr = subnodeptrX;
        subnodeptr += 4 * subnodeptrY;
        subnodeptr += 2 * subnodeptrZ;

        childidx += subnodeptr;

        umin.x += voxel_dim * subnodeptrX;
        umin.y += voxel_dim * subnodeptrY;
        umin.z += voxel_dim * subnodeptrZ;

        // update node
        nodeptr = octree[childidx].id;
    }

    // first iteration will skip the for-loop above!
	// check if current node has to be set "flagged"
	if (has_to_be_flagged) {
        // set the flag. if the flag is set the node is marked that it has to be checked for
        // further subdivisions (it has no childs so far)
		nodeptr |= 0x80000000;
		octree[childidx].id = nodeptr;
	}

}
