#version 440 core

#include "common/extensions.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

#include "common/bindings.glsl"
#include "voxel.glsl"

layout(location = 0) uniform uint uNumVoxelFrag;
layout(location = 1) uniform uint uTreeLevels;
layout(location = 2) uniform uint uMaxLevel;
layout(location = 3) uniform uint uNumVoxelsPerDim;

void main()
{
    // retrieve current thread id and return if out of bounds
    const uint ID = gl_GlobalInvocationID.x;
    if (ID >= uNumVoxelFrag)
        return;

    uint voxel_dim = uNumVoxelsPerDim;
    uvec3 umin = uvec3(0u);
    uvec3 pos  = uvec3(unpackUnorm4x8(voxelFragment[ID].position_diff_r).xyz *
            float(voxel_dim));

    // index of first child
    uint childidx = 0u;
    uint nodeptr = octree[childidx].id;

    // iterate through all tree levels
    for (uint i = 0u; i < uMaxLevel; ++i) {
        voxel_dim /= 2u;

        // find subnode
        uvec3 subnode = clamp((pos - umin) / voxel_dim, uvec3(0u), uvec3(1u));

        // get child pointer by ignoring the node's ptr MSB
        childidx = uint(nodeptr & 0x7FFFFFFFu);
        // determine index of subnode
        childidx += subnode.z * 4u + subnode.y * 2u + subnode.x;

        umin += voxel_dim * subnode;

        nodeptr = octree[childidx].id;
    }

    // flag node
    octree[childidx].id = 0x80000000u;

    if (uMaxLevel + 1 == uTreeLevels) {

        // unpack stuff
        vec4 tmp = unpackUnorm4x8(voxelFragment[ID].position_diff_r);
        vec3 position = tmp.xyz;
        vec3 diffuse;
        diffuse.r = tmp.w;

        tmp = unpackUnorm4x8(voxelFragment[ID].diff_gb_normal_xy);
        diffuse.gb = tmp.xy;

        vec3 normal;
        normal.xy = tmp.zw;

        tmp = unpackUnorm4x8(voxelFragment[ID].normal_z_emissive);
        normal.z = tmp.x;
        normal = (normal * 2.0) - 1.0;

        vec3 emissive = tmp.ywz;

        // add
        atomicAdd(octreeColor[childidx].count, 1);
        // TODO position

        atomicAdd(octreeColor[childidx].diffuse.r, diffuse.r);
        atomicAdd(octreeColor[childidx].diffuse.g, diffuse.g);
        atomicAdd(octreeColor[childidx].diffuse.b, diffuse.b);

        atomicAdd(octreeColor[childidx].emissive.r, emissive.r);
        atomicAdd(octreeColor[childidx].emissive.g, emissive.g);
        atomicAdd(octreeColor[childidx].emissive.b, emissive.b);

        atomicAdd(octreeColor[childidx].normal.x, normal.x);
        atomicAdd(octreeColor[childidx].normal.y, normal.y);
        atomicAdd(octreeColor[childidx].normal.z, normal.z);

    }

}
