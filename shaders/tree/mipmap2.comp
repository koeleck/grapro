#version 440 core

#include "voxel.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(location = 0) uniform uint uCount;
layout(location = 1) uniform uint uStartNode;

void main()
{
    const uint threadId = gl_GlobalInvocationID.x;
    if (threadId >= uCount)
        return;

    const uint idx = uStartNode + threadId;
    if ((octree[idx].id & 0x80000000u) == 0)
        return;

    const uint childidx = (octree[idx].id & 0x7fffffffu);


    /*
     * gaussian weights for cube:
     *   - corner:          1/64  (8 points)
     *   - edge:            1/32  (12 points)
     *   - side midpoint:   1/16  (6 points)
     *   - center:          1/8   (1 point)
     *
     * For some reason, we have to use half of these values!
     */

    ivec3 thisBrick = getBrickCoord(idx);
    ivec3 brick[8];
    bool isEmpty[8];
    for (int i = 0; i < 8; ++i) {
        isEmpty[i] = ((octree[childidx + i].id & 0x80000000u) == 0);
        brick[i] = getBrickCoord(childidx + i);
    }

    // left (corner, edge, midpoint, center)
    vec4 left =
        (
            imageLoad(octreeBrickTex, brick[0]) +
            imageLoad(octreeBrickTex, brick[2]) +
            imageLoad(octreeBrickTex, brick[4]) +
            imageLoad(octreeBrickTex, brick[6])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3(-1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3(-1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3(-1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[6] + ivec3(-1,  0,  0))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3(-1,  1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3(-1,  0,  1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  1,  1)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3(-1,  0,  1)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3(-1,  1,  0))
        ) / 8.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3(-1, 1, 1))
        ) / 4.0;
    imageStore(octreeBrickTex, thisBrick + ivec3(-1, 0, 0), left);

    // right (corner, edge, midpoint, center)
    vec4 right =
        (
            imageLoad(octreeBrickTex, brick[1]) +
            imageLoad(octreeBrickTex, brick[3]) +
            imageLoad(octreeBrickTex, brick[5]) +
            imageLoad(octreeBrickTex, brick[7])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[3] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[5] + ivec3( 0,  1,  0))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  1,  1))
        ) / 8.0;
    imageStore(octreeBrickTex, thisBrick + ivec3( 1, 0, 0), right);

    // front (corner, edge, midpoint, center)
    vec4 front =
        (
            imageLoad(octreeBrickTex, brick[0]) +
            imageLoad(octreeBrickTex, brick[1]) +
            imageLoad(octreeBrickTex, brick[2]) +
            imageLoad(octreeBrickTex, brick[3])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  0, -1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  0, -1)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3( 0,  0, -1)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[3] + ivec3( 0,  0, -1))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  1, -1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1,  1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1,  0, -1)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  1, -1)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3( 1,  0, -1))
        ) / 8.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3(-1, 1, 1))
        ) / 4.0;
    imageStore(octreeBrickTex, thisBrick + ivec3( 0, 0, -1), front);

    // back (corner, edge, midpoint, center)
    vec4 back =
        (
            imageLoad(octreeBrickTex, brick[4]) +
            imageLoad(octreeBrickTex, brick[5]) +
            imageLoad(octreeBrickTex, brick[6]) +
            imageLoad(octreeBrickTex, brick[7])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[4] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[5] + ivec3( 0,  1,  0)) +
            imageLoad(octreeBrickTex, brick[6] + ivec3( 1,  0,  0))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[4] + ivec3( 1,  1,  0))
        ) / 8.0;
    imageStore(octreeBrickTex, thisBrick + ivec3( 0, 0, 1), back);

    // bottom (corner, edge, midpoint, center)
    vec4 bottom =
        (
            imageLoad(octreeBrickTex, brick[0]) +
            imageLoad(octreeBrickTex, brick[1]) +
            imageLoad(octreeBrickTex, brick[4]) +
            imageLoad(octreeBrickTex, brick[5])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0, -1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0, -1,  0)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3( 0, -1,  0)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[5] + ivec3( 0, -1,  0))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 0, -1,  1)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1, -1,  0)) +
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1,  0,  1)) +
            imageLoad(octreeBrickTex, brick[1] + ivec3( 0, -1,  1)) +
            imageLoad(octreeBrickTex, brick[4] + ivec3( 1, -1,  0))
        ) / 8.0 +
        (
            imageLoad(octreeBrickTex, brick[0] + ivec3( 1, -1,  1))
        ) / 4.0;
    imageStore(octreeBrickTex, thisBrick + ivec3( 0, -1, 0), bottom);

    // top (corner, edge, midpoint, center)
    vec4 top =
        (
            imageLoad(octreeBrickTex, brick[2]) +
            imageLoad(octreeBrickTex, brick[3]) +
            imageLoad(octreeBrickTex, brick[6]) +
            imageLoad(octreeBrickTex, brick[7])
        ) / 32.0 +
        (
            imageLoad(octreeBrickTex, brick[2] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[2] + ivec3( 1,  0,  0)) +
            imageLoad(octreeBrickTex, brick[3] + ivec3( 0,  0,  1)) +
            imageLoad(octreeBrickTex, brick[6] + ivec3( 1,  0,  0))
        ) / 16.0 +
        (
            imageLoad(octreeBrickTex, brick[2] + ivec3( 1,  0,  1))
        ) / 8.0;
    imageStore(octreeBrickTex, thisBrick + ivec3( 0, 1, 0), top);
}

