#version 440 core

#include "voxel.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(location = 0) uniform uint uCount;
layout(location = 1) uniform uint uStartNode;

void main()
{
    const uint threadId = gl_GlobalInvocationID.x;
    if (threadId >= uCount)
        return;

    const uint idx = uStartNode + threadId;
    if ((octree[idx].id & 0x80000000u) == 0)
        return;

    const uint childidx = (octree[idx].id & 0x7fffffffu);


    /*
     * gaussian weights for cube:
     *   - corner:          1/64  (8 points)
     *   - edge:            1/32  (12 points)
     *   - side midpoint:   1/16  (6 points)
     *   - center:          1/8   (1 point)
     *
     * For some reason, we have to use half of these values!
     */

    ivec3 thisBrick = getBrickCoord(idx);

    vec4 corners[8] = vec4[8](
            imageLoad(octreeBrickTex, thisBrick + ivec3(-1, -1, -1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3( 1, -1, -1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3(-1,  1, -1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3( 1,  1, -1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3(-1, -1,  1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3( 1, -1,  1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3(-1,  1,  1)),
            imageLoad(octreeBrickTex, thisBrick + ivec3( 1,  1,  1)));

    imageStore(octreeBrickTex, thisBrick + ivec3( 0, -1, -1), (corners[0] + corners[1]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3(-1, -1,  0), (corners[0] + corners[4]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 1, -1,  0), (corners[1] + corners[5]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 0, -1,  1), (corners[4] + corners[5]) * 0.5);

    imageStore(octreeBrickTex, thisBrick + ivec3( 0,  1, -1), (corners[2] + corners[3]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3(-1,  1,  0), (corners[2] + corners[6]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 1,  1,  0), (corners[3] + corners[7]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 0,  1,  1), (corners[6] + corners[7]) * 0.5);

    imageStore(octreeBrickTex, thisBrick + ivec3(-1,  0, -1), (corners[0] + corners[2]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 1,  0, -1), (corners[1] + corners[3]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3(-1,  0,  1), (corners[4] + corners[6]) * 0.5);
    imageStore(octreeBrickTex, thisBrick + ivec3( 1,  0,  1), (corners[5] + corners[7]) * 0.5);
}



