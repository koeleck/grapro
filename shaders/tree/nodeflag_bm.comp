#version 440 core

#include "common/extensions.glsl"
#include "common/bindings.glsl"
#include "common/voxel.glsl"

layout (local_size_variable) in;

uniform uint u_numVoxelFrag;
uniform uint u_voxelDim;
uniform uint u_maxLevel;

void main()
{
    // retrieve current thread id and return if out of bounds
    const uint threadID = gl_GlobalInvocationID.x;
    if (threadID >= u_numVoxelFrag)
        return;

    uint childIdx = 0;
    uint nodeptr = octree[0].id; // ptr to first child
    int voxel_dim = int(u_voxelDim);
    ivec3 umin = ivec3(0);
    const ivec3 pos = ivec3(voxel[threadID].position.xyz);

    // iterate through all tree levels
    for (uint i = 0; i < u_maxLevel; ++i) {

        // calculate lower level dimension
        voxel_dim /= 2;

        // get child pointer by ignoring the node's ptr MSB
        childIdx = uint(nodeptr & 0x7FFFFFFF);

        // create subnodes
        const ivec3 subnode = clamp(1 + pos - umin - voxel_dim, 0, 1);
        umin += voxel_dim * subnode;

        // calculate new child node
        childIdx += subnode.x + 2 * subnode.y + 4 * subnode.z;
        nodeptr = octree[childIdx].id;

    }

    // flag node
    octree[childIdx].id = 0x80000000u;

}
